{"ast":null,"code":"import _classCallCheck from \"/Users/samagarwal/scoreboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samagarwal/scoreboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samagarwal/scoreboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samagarwal/scoreboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samagarwal/scoreboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/samagarwal/scoreboard/src/components/Stopwatch.js\";\nimport React, { Component } from 'react';\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stopwatch, _Component);\n\n  function Stopwatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stopwatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stopwatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    _this.handleStopwatch = function () {\n      _this.setState(function (prevState) {\n        return {\n          isRunning: !prevState.isRunning\n        };\n      });\n\n      if (!_this.state.isRunning) {\n        _this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        elapsedTime: 0,\n        previousTime: 0\n      });\n    };\n\n    _this.tick = function () {\n      if (_this.state.isRunning) {\n        var now = Date.now();\n\n        _this.setState(function (prevState) {\n          return {\n            previousTime: now,\n            elapsedTime: prevState.elapsedTime + (now - _this.state.previousTime)\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"stopwatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Stopwatch\"), React.createElement(\"span\", {\n        className: \"stopwatch-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, Math.floor(this.state.elapsedTime / 1000)), React.createElement(\"button\", {\n        onClick: this.handleStopwatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.state.isRunning ? 'Stop' : 'Start'), React.createElement(\"button\", {\n        onClick: this.handleReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Stopwatch;\n}(Component);\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/samagarwal/scoreboard/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","setState","prevState","Date","now","handleReset","tick","intervalID","setInterval","clearInterval","Math","floor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,S;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,WAAW,EAAE,CAFT;AAGJC,MAAAA,YAAY,EAAG;AAHX,K;;UAMRC,e,GAAkB,YAAM;AACpB,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBL,UAAAA,SAAS,EAAE,CAACK,SAAS,CAACL;AADE,SAAL;AAAA,OAAvB;;AAGA,UAAI,CAAC,MAAKD,KAAL,CAAWC,SAAhB,EAA2B;AACvB,cAAKI,QAAL,CAAc;AAAEF,UAAAA,YAAY,EAAEI,IAAI,CAACC,GAAL;AAAhB,SAAd;AACH;AACJ,K;;UAUDC,W,GAAc,YAAM;AAChB,YAAKJ,QAAL,CAAc;AACVH,QAAAA,WAAW,EAAE,CADH;AAEVC,QAAAA,YAAY,EAAG;AAFL,OAAd;AAIH,K;;UAEDO,I,GAAO,YAAM;AACT,UAAI,MAAKV,KAAL,CAAWC,SAAf,EAAyB;AACrB,YAAMO,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;;AACA,cAAKH,QAAL,CAAe,UAAAC,SAAS;AAAA,iBAAK;AACzBH,YAAAA,YAAY,EAAEK,GADW;AAEzBN,YAAAA,WAAW,EAAEI,SAAS,CAACJ,WAAV,IAAyBM,GAAG,GAAG,MAAKR,KAAL,CAAWG,YAA1C;AAFY,WAAL;AAAA,SAAxB;AAIH;AACJ,K;;;;;;;wCAvBkB;AAAA;;AACf,WAAKQ,UAAL,GAAkBC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACF,IAAL,EAAN;AAAA,OAAD,EAAoB,GAApB,CAA7B;AACH;;;2CAEqB;AAClBG,MAAAA,aAAa,CAAC,KAAKF,UAAN,CAAb;AACH;;;6BAmBQ;AACL,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKG,IAAI,CAACC,KAAL,CAAW,KAAKf,KAAL,CAAWE,WAAX,GAAuB,IAAlC,CADL,CAFF,EAKE;AAAQ,QAAA,OAAO,EAAE,KAAKE,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKJ,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,OADtC,CALF,EAQE;AAAQ,QAAA,OAAO,EAAE,KAAKQ,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,CADF;AAYD;;;;EAtDiBX,S;;AAyDxB,eAAeC,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime : 0\n    };\n\n    handleStopwatch = () => {\n        this.setState(prevState => ({\n            isRunning: !prevState.isRunning\n        }));\n        if (!this.state.isRunning) {\n            this.setState({ previousTime: Date.now() });\n        }\n    }\n\n    componentDidMount(){\n        this.intervalID = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.intervalID);\n    }\n\n    handleReset = () => {\n        this.setState({\n            elapsedTime: 0,\n            previousTime : 0\n        });\n    }\n\n    tick = () => {\n        if (this.state.isRunning){\n            const now = Date.now();\n            this.setState( prevState => ({\n                previousTime: now,\n                elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n            }));\n        }\n    }\n\n    render() {\n        return (\n          <div className=\"stopwatch\">\n            <h2>Stopwatch</h2>\n            <span className=\"stopwatch-time\">\n                {Math.floor(this.state.elapsedTime/1000)}\n            </span>\n            <button onClick={this.handleStopwatch}>\n                { this.state.isRunning ? 'Stop' : 'Start' }\n            </button>\n            <button onClick={this.handleReset}>Reset</button>\n          </div>\n        );\n      }\n}\n\nexport default Stopwatch;"]},"metadata":{},"sourceType":"module"}